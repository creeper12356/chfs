#include <string>
#include <fstream>
#include <iostream>
#include <vector>
#include <algorithm>

#include "map_reduce/protocol.h"

namespace mapReduce{
//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
    std::vector<KeyVal> Map(const std::string &content) {
        // Your code goes here
        // Hints: split contents into an array of words.
        std::vector<KeyVal> key_vals;

        std::string word;
        std::string key;
        std::string val;
        for (const auto &c : content) {
            if(!isalpha(c)) {
                if(!word.empty()) {
                    key = word;
                    val = "1";
                    // TODO: 考虑到大小写转换
                    key_vals.push_back(KeyVal(key, val));
                    word.clear();
                }
            } else {
                word += c;
            }
        }
        if (!word.empty()) {
            key = word;
            val = "1";
            key_vals.push_back(KeyVal(key, val));
        }

        return key_vals;

    }

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
    std::string Reduce(const std::string &key, const std::vector<std::string> &values) {
        // Your code goes here
        // Hints: return the number of occurrences of the word.
        int cnt = 0;

        for (const std::string &val : values) {
            cnt += std::stoi(val);
        }

        return key + " " + std::to_string(cnt) + "\n";
    }
}